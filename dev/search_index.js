var documenterSearchIndex = {"docs":
[{"location":"moleculargraph/query/#Molecular-queries","page":"Molecular queries","title":"Molecular queries","text":"","category":"section"},{"location":"moleculargraph/query/","page":"Molecular queries","title":"Molecular queries","text":"Modules = [MolecularGraph]\nPages   = [\"./model/query.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/query/#MolecularGraph.remove_hydrogens!-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V<:QueryTree, E<:QueryTree}","page":"Molecular queries","title":"MolecularGraph.remove_hydrogens!","text":"remove_hydrogens!(q::MolGraph) -> Nothing\n\nRemove hydrogens from the molecular query. \n\nShould be applied after specialize_nonaromatic!. This function is intended for generalization of PAINS query in PubChem dataset.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/query/#MolecularGraph.QueryAny","page":"Molecular queries","title":"MolecularGraph.QueryAny","text":"QueryAny\n\nQuery component type that generate tautology function (arg -> true/false).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryLiteral","page":"Molecular queries","title":"MolecularGraph.QueryLiteral","text":"QueryLiteral\n\nGeneral query component type (arg -> key[arg] == value).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryOperator","page":"Molecular queries","title":"MolecularGraph.QueryOperator","text":"QueryOperator\n\nQuery component type for logical operators (arg -> q1[arg] && q2[arg]).\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryTree","page":"Molecular queries","title":"MolecularGraph.QueryTree","text":"QueryTree\n\nQuery component containar type for molecular graph properties.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/query/#MolecularGraph.QueryTruthTable","page":"Molecular queries","title":"MolecularGraph.QueryTruthTable","text":"QueryTruthTable(fml::Function, props::Vector{QueryLiteral}) -> QueryTruthTable\n\nTruth table evaluator for query match and containment. \n\nThis is expected to be generated by using generate_truthtable. Note that the properties must be unique and sorted if QueryTruthTable constructors is manually called for testing.\n\nfunction: function that takes a vector whose size is length(props) that corresponds to each property variables and returns true or false.\nprops: QueryLiteral vector.\n\n\n\n\n\n","category":"type"},{"location":"graph/#Common-interface","page":"MolecularGraph.Graph","title":"Common interface","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/interface.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Graph-model","page":"MolecularGraph.Graph","title":"Graph model","text":"","category":"section"},{"location":"graph/#Plain-graph","page":"MolecularGraph.Graph","title":"Plain graph","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/plaingraph.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Hyper-graph","page":"MolecularGraph.Graph","title":"Hyper graph","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/plainhypergraph.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Directed-Acyclic-Graph-(DAG)","page":"MolecularGraph.Graph","title":"Directed Acyclic Graph (DAG)","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/dag.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Graph-generation","page":"MolecularGraph.Graph","title":"Graph generation","text":"","category":"section"},{"location":"graph/#Graph-generator","page":"MolecularGraph.Graph","title":"Graph generator","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/generator.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Product-of-graphs","page":"MolecularGraph.Graph","title":"Product of graphs","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/product.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Disjoint-union","page":"MolecularGraph.Graph","title":"Disjoint union","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/disjointunion.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Contraction","page":"MolecularGraph.Graph","title":"Contraction","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/contraction.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Line-graph","page":"MolecularGraph.Graph","title":"Line graph","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/linegraph.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Subgraph-view","page":"MolecularGraph.Graph","title":"Subgraph view","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/subgraphview.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Graph-algorithms","page":"MolecularGraph.Graph","title":"Graph algorithms","text":"","category":"section"},{"location":"graph/#Connectivity","page":"MolecularGraph.Graph","title":"Connectivity","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/connectivity.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Shortest-path","page":"MolecularGraph.Graph","title":"Shortest path","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/shortestpath.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Cycle-basis","page":"MolecularGraph.Graph","title":"Cycle basis","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/cycle.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Triangles","page":"MolecularGraph.Graph","title":"Triangles","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/triangle.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Bipartite-Graph","page":"MolecularGraph.Graph","title":"Bipartite Graph","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/bipartite.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Maximum-cardinality-matching","page":"MolecularGraph.Graph","title":"Maximum cardinality matching","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/matching.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Planarity","page":"MolecularGraph.Graph","title":"Planarity","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/planarity.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Maximum-clique","page":"MolecularGraph.Graph","title":"Maximum clique","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/clique.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Subgraph-match-(VF2-algorithm)","page":"MolecularGraph.Graph","title":"Subgraph match (VF2 algorithm)","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/isomorphism/vf2.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"graph/#Maximum-common-subgraph-(Clique-detection-based-algorithm)","page":"MolecularGraph.Graph","title":"Maximum common subgraph (Clique detection based algorithm)","text":"","category":"section"},{"location":"graph/","page":"MolecularGraph.Graph","title":"MolecularGraph.Graph","text":"Modules = [Graph]\nPages   = [\"graph/isomorphism/cliquemcs.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"geometry/#Cartesian","page":"MolecularGraph.Geometry","title":"Cartesian","text":"","category":"section"},{"location":"geometry/","page":"MolecularGraph.Geometry","title":"MolecularGraph.Geometry","text":"Modules = [Geometry]\nPages   = [\"geometry/cartesian.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#Molecule-I/O","page":"I/O","title":"Molecule I/O","text":"","category":"section"},{"location":"moleculargraph/io/#SDFile-reader","page":"I/O","title":"SDFile reader","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"sdfilereader.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.rxntoreaction-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractReaction","page":"I/O","title":"MolecularGraph.rxntoreaction","text":"rxntoreaction(::Type{T}, io::IO) -> T\nrxntoreaction(io::IO) -> Reaction{SDFMolGraph}\nrxntoreaction(::Type{T}, path::AbstractString) -> T\nrxntoreaction(path::AbstractString) -> Reaction{SDFMolGraph}\n\nRead a RXN file and parse it into a reaction object with the given type. The given argument should be a file input stream or a file path.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.sdfilereader-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.sdfilereader","text":"sdfilereader(file::IO)\nsdfilereader(path::AbstractString)\n\nRead SDFile data from input stream (or a file path as a string) and return a lazy iterator that yields molecule objects.\n\nsdfilereader does not stop and raise errors when an erroneous or incompatible SDFile block is read but produces an error message and yields an empty molecule. If this behavior is not desirable, you can use the customized supplier function instead of default supplier nohaltsupplier\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.sdftomol-Union{Tuple{T}, Tuple{Type{T}, IO}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.sdftomol","text":"sdftomol(::Type{T}, io::IO) -> T\nsdftomol(io::IO) -> SDFMolGraph\nsdftomol(::Type{T}, path::AbstractString) -> T\nsdftomol(path::AbstractString) -> SDFMolGraph\n\nRead a SDFile(.sdf or .mol) and parse it into a molecule object with the given type. The given argument should be a file input stream or a file path.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#SDFile-writer","page":"I/O","title":"SDFile writer","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"sdfilewriter.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.sdfilewriter-Tuple{IO, Any}","page":"I/O","title":"MolecularGraph.sdfilewriter","text":"sdfilewriter(io::IO, mols)\nsdfilewriter(filename::AbstractString, mols)\n\nWrite molecule data to the output stream as a SDFile format file.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#SMILES/SMARTS","page":"I/O","title":"SMILES/SMARTS","text":"","category":"section"},{"location":"moleculargraph/io/","page":"I/O","title":"I/O","text":"Modules = [MolecularGraph]\nPages   = [\"smarts/base.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/io/#MolecularGraph.smartstomol-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.smartstomol","text":"smartstomol(smarts::AbstractString) -> QueryMol{SmartsAtom,SmartsBond}\n\nParse SMARTS string into QueryMol object.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/io/#MolecularGraph.smilestomol-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:AbstractMolGraph","page":"I/O","title":"MolecularGraph.smilestomol","text":"smilestomol(smiles::AbstractString) -> GraphMol{SmilesAtom,SmilesBond}\n\nParse SMILES string into GraphMol object.\n\nThe syntax of SMILES in this library follows both Daylight SMILES and OpenSMILES.\n\nReferences\n\nOpenSMILES Specification http://opensmiles.org/spec/open-smiles.html\nDaylight Tutorials https://www.daylight.com/dayhtml_tutorials/index.html\n\n\n\n\n\n","category":"method"},{"location":"design/#Design-of-molecular-graph-models","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"","category":"section"},{"location":"design/#Graph-type-hierarchy","page":"Design of molecular graph models","title":"Graph type hierarchy","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"(AbstractGraph)\n(UndirectedGraph)\n(OrderedGraph)\nPlainGraph\nImmutablePlainGraph\nGraphMol{Atom,Bond}\nSDFile (Alias of GraphMol{SDFileAtom,SDFileBond})\nSMILES (Alias of GraphMol{SmilesAtom,SmilesBond})\nQueryMol{QueryAtom,QueryBond}\nSMARTS (Alias of QueryMol{SmartsAtom,SmartsBond})\nLineGraph\nCartesianProductGraph\nModularProductGraph\nSubgraphView{UndirectedGraph}\n(DirectedGraph)\n(OrderedDiGraph)\nPlainDiGraph\nFunctionalGroupClassGraph\nDiSubgraphView{DirectedGraph}\nHyperGraph?","category":"page"},{"location":"design/#AbstractGraph-methods","page":"Design of molecular graph models","title":"AbstractGraph methods","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"getnode, getedge, hasedge\nneighbors and its derivatives\nnodecount\nedgecount\nnodeset\nedgeset","category":"page"},{"location":"design/#DirectedGraph-methods","page":"Design of molecular graph models","title":"DirectedGraph methods","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"outneighbors and inneighbors","category":"page"},{"location":"design/#OrderedGraph-methods","page":"Design of molecular graph models","title":"OrderedGraph methods","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"nodesiter\nedgesiter\nnodeattrs\nedgeattrs","category":"page"},{"location":"design/#OrderedGraph","page":"Design of molecular graph models","title":"OrderedGraph","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"OrderedGraph consists of vectors of neighborhood map (incident edge => adjacent node) and edge (tuple of node index pair) vector.","category":"page"},{"location":"design/#QueryMol","page":"Design of molecular graph models","title":"QueryMol","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"QueryMol consists of QueryAtom and QueryBond that represent molecular query (ex. atom symbol is 'O' and charge is -1, bond order is 1 and not in rings, ...). This type of objects typically built from SMARTS query.","category":"page"},{"location":"design/#Node-type-hierarchy","page":"Design of molecular graph models","title":"Node type hierarchy","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"(AbstractNode)\n(Atom)\nSDFileAtom\nSmilesAtom\n(QueryAtom)\nSmartsAtom","category":"page"},{"location":"design/#Edge-type-hierarchy","page":"Design of molecular graph models","title":"Edge type hierarchy","text":"","category":"section"},{"location":"design/","page":"Design of molecular graph models","title":"Design of molecular graph models","text":"(AbstractEdge)\n(UndirectedEdge)\nEdge\n(Bond)\nSDFileBond\nSmilesBond\n(QueryBond)\nSmartsBond\n(DirectedEdge)\nArrow","category":"page"},{"location":"moleculargraph/properties/#Molecular-properties","page":"Chemical properties","title":"Molecular properties","text":"","category":"section"},{"location":"moleculargraph/properties/","page":"Chemical properties","title":"Chemical properties","text":"Modules = [MolecularGraph]\nPages   = [\"properties.jl\", \"wclogp.jl\", \"inchi.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/properties/#MolecularGraph.apparent_valence-Tuple{Any, Any}","page":"Chemical properties","title":"MolecularGraph.apparent_valence","text":"apparent_valence(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total bond order incident to 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.atom_counter-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.atom_counter","text":"atomcounter(mol::SimpleMolGraph) -> Dict{Symbol,Int}\n\nCount the number of atoms and return symbol => count dict.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.atom_symbol-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.atom_symbol","text":"atom_symbol(mol::MolGraph) -> Vector{Symbol}\n\nReturn a vector of size n representing atom symbols of 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.bond_order-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.bond_order","text":"bond_order(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing bond order of 1 to nth bonds of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.charge-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.charge","text":"charge(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing atom charges of 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.connectivity-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.connectivity","text":"connectivity(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total atoms (implicit and explicit) connected to 1 to nth atoms of the given molecule.\n\nThis property corresponds to SMARTS X query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.edge_which_ring-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.edge_which_ring","text":"edge_which_sssr(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing sssr membership of 1 to nth bonds of the given molecule.\n\nSSSR membership is represented as a set of SSSR indices assigned to each rings. This means bonds that have the same SSSR index belong to the same SSSR.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.empirical_formula-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.empirical_formula","text":"empirical_formula(mol::MolGraph) -> String\n\nReturn the empirical formula in Hill system.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.explicit_hydrogens-Tuple{Any, Any}","page":"Chemical properties","title":"MolecularGraph.explicit_hydrogens","text":"explicit_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of explicit hydrogens connected to 1 to nth atoms of the given molecule.\n\n\"Explicit\" means hydrogens are explicitly represented as graph nodes.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.fused_rings-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.fused_rings","text":"fused_rings(mol::SimpleMolGraph{T}) -> Vector{Vector{T}}\n\nReturn vectors of fused ring node sets.\n\nA fused ring is defined as a 2-edge connected components in terms of graph theory. Spirocyclic structures are considered to be part of a fused ring.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.heavy_atom_count-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.heavy_atom_count","text":"heavy_atom_count(mol::SimpleMolGraph) -> Int\n\nReturn the total number of non-hydrogen atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.heavy_atoms-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.heavy_atoms","text":"heavyatoms(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of non-hydrogen atoms connected to 1 to nth atoms of the given molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hybridization-NTuple{4, Any}","page":"Chemical properties","title":"MolecularGraph.hybridization","text":"hybridization(mol::SimpleMolGraph) -> Vector{Int}\n\nReturns a vector of size n representing the orbital hybridization symbols (:sp3, :sp2, :sp or :none) of 1 to nth atoms of the given molecule.\n\nThe hybridization value in inorganic atoms and non-typical organic atoms will be :none (e.g. s, sp3d and sp3d2 orbitals).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hydrogen_acceptor_count-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.hydrogen_acceptor_count","text":"hacceptorcount(mol::SimpleMolGraph) -> Int\n\nReturn the total number of hydrogen bond acceptors (N, O and F).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.hydrogen_donor_count-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.hydrogen_donor_count","text":"hdonorcount(mol::SimpleMolGraph) -> Int\n\nReturn the total number of hydrogen bond donors (O and N attached to hydrogens).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.implicit_hydrogens-Tuple{Any, Any}","page":"Chemical properties","title":"MolecularGraph.implicit_hydrogens","text":"implicit_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of implicit hydrogens connected to 1 to nth atoms of the given molecule.\n\n\"Implicit\" means hydrogens are not represented as graph nodes, but it can be infered from the intrinsic valence of typical organic atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_aromatic-Tuple{Any, Any, Any}","page":"Chemical properties","title":"MolecularGraph.is_aromatic","text":"is_aromatic(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturns a vector of size n representing whether 1 to nth atoms of the given molecule belong to an aromatic ring or not.\n\nSome kind of aromaticity resulting from long conjugated chains and charge delocalization may be unrecognizable. Also, non-classical aromaticity such as Moebius aromaticity is not considered.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_edge_aromatic-Tuple{Any, Any, Any}","page":"Chemical properties","title":"MolecularGraph.is_edge_aromatic","text":"is_edge_aromatic(mol::SimpleMolGraph) -> Vector{Bool}\n\nReturns a vector of size n representing whether 1 to nth bonds of the given molecule belong to an aromatic ring or not.\n\nSee isaromatic.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_edge_in_ring-Tuple{MolGraph}","page":"Chemical properties","title":"MolecularGraph.is_edge_in_ring","text":"is_edge_in_ring(mol::MolGraph) -> Vector{Bool}\n\nReturn a vector of size n representing whether 1 to nth bonds of the given molecule belong to a ring or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_in_ring-Tuple{MolGraph}","page":"Chemical properties","title":"MolecularGraph.is_in_ring","text":"is_in_ring(mol::MolGraph) -> Vector{Bool}\n\nReturn a vector of size n representing whether 1 to nth atoms of the given molecule belong to a ring or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.is_rotatable-NTuple{4, Any}","page":"Chemical properties","title":"MolecularGraph.is_rotatable","text":"isrotatable(mol::SimpleMolGraph)\n\nReturn a vector of size n representing whether 1 to nth bonds of the given molecule are rotatable or not.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.lone_pair-Tuple{Any, Any}","page":"Chemical properties","title":"MolecularGraph.lone_pair","text":"lone_pair(mol::MolGraph) -> Vector{Union{Int,Nothing}}\n\nReturn a vector of size n representing the number of lone pairs of 1 to nth atoms of the given molecule.\n\nThe number of lone pair in inorganic atoms would be nothing. The result can take negative value if the atom has empty shells (e.g. B).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.molecular_formula-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.molecular_formula","text":"molecular_formula(mol::MolGraph) -> String\n\nReturn the molecular formula in Hill system.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.multiplicity-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.multiplicity","text":"multiplicity(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing atom multiplicities of 1 to nth atoms of the given molecule (1: non-radical, 2: radical, 3: biradical).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.pi_electron-NTuple{5, Any}","page":"Chemical properties","title":"MolecularGraph.pi_electron","text":"pi_electron(mol::SimpleMolGraph) -> Vector{Int}\n\nReturns a vector of size n representing the number of pi electrons of 1 to nth atoms of the given molecule.\n\nThe counting of pi electrons is based on the following rules.\n\nAny atom incident to a double bond -> +1\nAny atom incident to two double bond -> +2\nAny atom incident to a triple bond -> +2\nAny other uncharged N, O or S that are neighbor of multiple bonds -> +2\n\nThese rules are applied for only typical organic atoms. The values for inorganic atoms will be 0.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.ring_count-Tuple{MolGraph}","page":"Chemical properties","title":"MolecularGraph.ring_count","text":"ring_count(mol::MolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of sssr that 1 to nth atoms of the given molecule belong to.\n\nThis property corresponds to SMARTS R query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.rotatable_count-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.rotatable_count","text":"rotatablecount(mol::SimpleMolGraph) -> Int\n\nReturn the total number of rotatable bonds.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.smallest_ring-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.smallest_ring","text":"smallest_ring(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the size of the smallest sssr that 1 to nth atoms of the given molecule belong to. \n\nIf the node is not in a ring, the value would be 0. This property corresponds to SMARTS r query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.sssr-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.sssr","text":"sssr(mol::SimpleMolGraph{T}) -> Vector{Vector{T}}\n\nReturn vectors of ring nodes representing small set of smallest rings (SSSR).\n\nSee Graph.minimumcyclebasis.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.total_hydrogens-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.total_hydrogens","text":"total_hydrogens(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a vector of size n representing the number of total hydrogens (implicit and explicit) connected to 1 to nth atoms of the given molecule.\n\nThis property corresponds to SMARTS H query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.valence-Tuple{Any, Any}","page":"Chemical properties","title":"MolecularGraph.valence","text":"valence(mol::SimpleMolGraph) -> Vector{Union{Int,Nothing}}\n\nReturn a vector of size n representing the intrinsic valence of 1 to nth atoms of the given molecule.\n\nThe number of implicit hydrogens would be calculated based on the valence. The valence value in inorganic atoms would be nothing. This property corresponds to SMARTS v query.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.which_fused_ring-Tuple{SimpleMolGraph}","page":"Chemical properties","title":"MolecularGraph.which_fused_ring","text":"which_fused_ring(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing fusedrings membership of 1 to nth atoms of the given molecule.\n\nFused ring membership is represented as a set of fused ring indices assigned to each fused rings. This means atoms that have the same fused ring index belong to the same fused ring.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.which_ring-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Chemical properties","title":"MolecularGraph.which_ring","text":"which_ring(mol::SimpleMolGraph) -> Vector{Vector{Int}}\n\nReturn a vector of size n representing sssr membership of 1 to nth nodes of the given graph.\n\nSSSR membership is represented as a vector of SSSR indices assigned to each rings. This means nodes that have the same SSSR index belong to the same SSSR.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.wclogp-Tuple{MolGraph}","page":"Chemical properties","title":"MolecularGraph.wclogp","text":"wclogp(mol::GraphMol) -> Float64\n\nReturn predicted logP value calculated by using Wildman and Crippen method.\n\nReference\n\nWildman, S. A. and Crippen, G. M. (1999). Prediction of Physicochemical Parameters by Atomic Contributions. Journal of Chemical Information and Modeling, 39(5), 868–873. https://doi.org/10.1021/ci990307l\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.wclogptype-Tuple{MolGraph}","page":"Chemical properties","title":"MolecularGraph.wclogptype","text":"wclogptype(mol::MolGraph)\n\nReturn Wildman-Crippen LogP atom types.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.inchi-Tuple{String}","page":"Chemical properties","title":"MolecularGraph.inchi","text":"inchi(molblock::String) -> String\ninchi(mol::MolGraph) -> String\n\nGenerate InChI string from molblock string or molecule\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/properties/#MolecularGraph.inchikey-Tuple{Union{Nothing, String}}","page":"Chemical properties","title":"MolecularGraph.inchikey","text":"inchikey(inchi::String) -> String\ninchikey(mol::MolGraph) -> String\n\nGenerate InChI key from InChI string or molecule\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#Structure-match","page":"Structure match","title":"Structure match","text":"","category":"section"},{"location":"moleculargraph/structurematch/","page":"Structure match","title":"Structure match","text":"Modules = [MolecularGraph]\nPages   = [\"structurematch.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/structurematch/#MolecularGraph.connected_mcis","page":"Structure match","title":"MolecularGraph.connected_mcis","text":"connected_mcis(mol1, mol2; kwargs...) -> MCSResult\nconnected_mces(mol1, mol2; kwargs...) -> MCSResult\n\nCompute connected maximum common substructure (MCS) of mol1 and mol2.\n\nKeyword arguments\n\ntimeout(Int): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\n\n\n\n\n","category":"function"},{"location":"moleculargraph/structurematch/#MolecularGraph.disconnected_mcis","page":"Structure match","title":"MolecularGraph.disconnected_mcis","text":"disconnected_mcis(mol1, mol2; kwargs...) -> MCSResult\ndisconnected_mces(mol1, mol2; kwargs...) -> MCSResult\n\nCompute disconnected maximum common substructure (MCS) of mol1 and mol2.\n\nKeyword arguments\n\ntimeout(Int): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\n\n\n\n\n","category":"function"},{"location":"moleculargraph/structurematch/#MolecularGraph.edge_substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.edge_substruct_matches","text":"edge_substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.emaptonmap-Tuple{Any, MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.emaptonmap","text":"nmap = emaptonmap(emap, mol, query)\n\nConvert an edge-based mapping, of the form returned by edgesubgraphmatches, into a map between nodes. Commonly, nmap[i] is a length-1 vector [j], where i=>j is the mapping from nodeattr(query, i) to nodeattr(mol, j). In cases where the mapping is ambiguous, nmap[i] may be multivalued.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.ematchgen-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.ematchgen","text":"ematchgen(mol1::MolGraph, mol2::MolGraph) -> Function\nematchgen(mol::MolGraph{T1,V1,E1}, qmol::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2,E1,E2<:QueryTree}\nematchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2,E1<:QueryTree,E2<:QueryTree}\n\nReturn a default edge attribute matching function for graph isomorphism algorithms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.exact_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.exact_matches","text":"exact_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if these are exactly same. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_edge_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_edge_substruct_match","text":"has_edge_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_exact_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_exact_match","text":"has_exact_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol and query have exactly the same structure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_node_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_node_substruct_match","text":"has_node_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.has_substruct_match-Tuple{Any, Any}","page":"Structure match","title":"MolecularGraph.has_substruct_match","text":"has_substruct_match(mol1, mol2; kwargs...) -> Bool\n\nReturn whether mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.node_substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.node_substruct_matches","text":"node_substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.substruct_matches-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.substruct_matches","text":"substruct_matches(mol1, mol2; kwargs...) -> Iterator\n\nReturn a lazy iterator that generate node mappings between mol and query if mol has query as a substructure. See MolecularGraph.structmatches for available options.\n\noptions\n\nvmatch::Function: a function for semantic atom attribute matching (default: MolecularGraph.vmatch)\nematch::Function: a function for semantic bond attribute matching (default: MolecularGraph.ematch)\nmandatory::Dict{Int,Int}: mandatory node mapping (or edge mapping if matchtype=:edgeinduced)\nforbidden::Dict{Int,Int}: forbidden node mapping (or edge mapping if matchtype=:edgeinduced)\ntimeout::Union{Int,Nothing}: if specified, abort vf2 calculation when the time reached and return empty iterator (default: 10 seconds).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/structurematch/#MolecularGraph.tcmcis","page":"Structure match","title":"MolecularGraph.tcmcis","text":"tcmcis(mol1, mol2; kwargs...) -> MCSResult\ntcmces(mol1, mol2; kwargs...) -> MCSResult\n\nCompute maximum common substructure (MCS) of mol1 and mol2 with topological constraint.\n\nKeyword arguments\n\ndiameter(Int): distance cutoff for topological constraint.\ntolerance(Int): distance mismatch tolerance for topological constraint.\ntimeout(Int): abort calculation and return suboptimal results if the execution\n\ntime has reached the given value (default=60, in seconds).\n\ntargetsize(Int): abort calculation and return suboptimal result so far if the\n\ngiven mcs size achieved.\n\nReferences\n\nKawabata, T. (2011). Build-Up Algorithm for Atomic Correspondence between\n\nChemical Structures. Journal of Chemical Information and Modeling, 51(8), 1775–1787. https://doi.org/10.1021/ci2001023\n\nhttps://www.jstage.jst.go.jp/article/ciqs/2017/0/2017P4/article/-char/en\n\n\n\n\n\n","category":"function"},{"location":"moleculargraph/structurematch/#MolecularGraph.vmatchgen-Tuple{MolGraph, MolGraph}","page":"Structure match","title":"MolecularGraph.vmatchgen","text":"vmatchgen(mol1::MolGraph, mol2::MolGraph) -> Function\nvmatchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1,V2<:QueryTree,E1,E2} -> Function\nvmatchgen(mol1::MolGraph{T1,V1,E1}, mol2::MolGraph{T2,V2,E2}\n    ) where {T1,T2,V1<:QueryTree,V2<:QueryTree,E1,E2}\n\nReturn a default vertex attribute matching function for graph isomorphism algorithms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#Preprocessing","page":"Preprocessing","title":"Preprocessing","text":"","category":"section"},{"location":"moleculargraph/preprocess/","page":"Preprocessing","title":"Preprocessing","text":"Modules = [MolecularGraph]\nPages   = [\"preprocess.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/preprocess/#MolecularGraph.add_hydrogens!-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.add_hydrogens!","text":"addhydrogens(mol::GraphMol) -> GraphMol\n\nReturn the molecule with all hydrogen nodes explicitly attached.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.all_hydrogens-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.all_hydrogens","text":"allhydrogens(mol::SimpleMolGraph) -> Set{Int}\n\nReturn a set of all hydrogen nodes.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.depolarize-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.depolarize","text":"depolarize(mol::SimpleMolGraph; negative=:O, positive=[:C, :P]) -> Nothing\n\nDepolarize dipole double bonds of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.deprotonate_oniums-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.deprotonate_oniums","text":"deprotonate_oniums(mol::SimpleMolGraph) -> Vector{Int}\n\nDeprotonate onium groups of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.extract_largest_component!-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.extract_largest_component!","text":"extract_largest_component!(mol::SimpleMolGraph) -> Nothing\n\nReturn the largest connected component of the molecular graph.\n\nThis should be useful when you want to remove salt and water molecules from the molecular graph simply. On the other hand, this can remove important components from the mixture so carefully apply this preprocess method.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.kekulize-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.kekulize","text":"kekulize(mol::SimpleMolGraph) -> Vector{Int}\n\nKekulize the molecule that has SMILES aromatic bonds.\n\nSMILES allows aromatic atoms in small letters - b, c, n, o, p, s, [as] and [se]. Once these are stored in SmilesAtom.isaromatic field, then kekulize will place double bonds to satisfy valences.\n\nKekulization is necessary for molecules parsed from SMILES. If not kekulized, some bond valence and implicit hydrogen properties would be wrong.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.largest_component_nodes-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.largest_component_nodes","text":"largest_component_nodes(mol::SimpleMolGraph) -> Vector{Int}\n\nReturn a set of nodes in the largest connected component.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.polarize-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.polarize","text":"polarize(mol::SimpleMolGraph; negative=:O, positive=[:N, :S]) -> Nothing\n\nPolarize dipole double bonds of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.protonate_acids-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.protonate_acids","text":"protonate_acids(mol::SimpleMolGraph) -> Vector{Int}\n\nProtonate oxo(thio) anion groups of the molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.removable_hydrogens-Union{Tuple{SimpleMolGraph{T, V, E}}, Tuple{E}, Tuple{V}, Tuple{T}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.removable_hydrogens","text":"removable_hydrogens(mol::SimpleMolGraph) -> Set{Int}\n\nReturn a vector of removable hydrogen nodes.\n\nremovable means not charged, no unpaired electron, no specific mass, non-stereospecific and attached to organic heavy atoms.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.remove_hydrogens!-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.remove_hydrogens!","text":"removehydrogens(mol::MolGraph) -> GraphMol\n\nReturn the molecule with hydrogen nodes removed.\n\nIf option all is set to true (default), all hydrogens will be removed, otherwise only trivial hydrogens will be removed (see trivialhydrogens).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.to_allene_like-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.to_allene_like","text":"to_allene_like(mol::SimpleMolGraph) -> Nothing\n\nStandardize the molecule so that all 1,3-dipole groups are represented as allene-like structure (e.g. Diazo group [C-][N+]#N -> C=[N+]=[N-]).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.to_triple_bond-Tuple{SimpleMolGraph}","page":"Preprocessing","title":"MolecularGraph.to_triple_bond","text":"to_triple_bond(mol::SimpleMolGraph) -> Nothing\n\nStandardize the molecule so that all 1,3-dipole groups are represented as triple bond and single bond (e.g. Diazo group C=[N+]=[N-] -> [C-][N+]#N).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#Stereochemistry","page":"Preprocessing","title":"Stereochemistry","text":"","category":"section"},{"location":"moleculargraph/preprocess/","page":"Preprocessing","title":"Preprocessing","text":"Modules = [MolecularGraph]\nPages   = [\"stereo.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/preprocess/#MolecularGraph.remove_stereo_hydrogen!-Tuple{SimpleMolGraph, Integer}","page":"Preprocessing","title":"MolecularGraph.remove_stereo_hydrogen!","text":"remove_stereo_hydrogen!(mol::SimpleMolGraph, v::Integer) -> Bool\n\nSafely remove explicit hydrogens connected to stereocenter node v.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.set_stereobond!-Union{Tuple{E}, Tuple{V}, Tuple{T}, Tuple{SimpleMolGraph{T, V, E}, Any, Any, Any, Any}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.set_stereobond!","text":"set_stereocenter!(mol::SimpleMolGraph, bond, v1, v2, is_cis) -> Nothing\n\nSet stereocenter information to graph properties.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.set_stereocenter!-Union{Tuple{E}, Tuple{V}, Tuple{T}, Tuple{SimpleMolGraph{T, V, E}, Any, Any, Any, Any, Any}} where {T, V, E}","page":"Preprocessing","title":"MolecularGraph.set_stereocenter!","text":"set_stereocenter!(mol::SimpleMolGraph, center, looking_from, v1, v2, is_clockwise) -> Nothing\n\nSet stereocenter information to graph properties.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.stereobond_from_sdf2d!-Tuple{MolGraph}","page":"Preprocessing","title":"MolecularGraph.stereobond_from_sdf2d!","text":"stereobond_from_sdf2d!(mol::MolGraph) -> Nothing\n\nSet cis-trans diastereomerism information obtained from 2D SDFile.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.stereobond_from_smiles!-Tuple{MolGraph}","page":"Preprocessing","title":"MolecularGraph.stereobond_from_smiles!","text":"stereobond_from_smiles!(mol::MolGraph) -> Nothing\n\nSet cis-trans diastereomerism information obtained from SMILES.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.stereocenter_from_sdf2d!-Tuple{MolGraph}","page":"Preprocessing","title":"MolecularGraph.stereocenter_from_sdf2d!","text":"stereocenter_from_sdf2d!(mol::MolGraph) -> Nothing\n\nSet stereocenter information obtained from 2D SDFile.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/preprocess/#MolecularGraph.stereocenter_from_smiles!-Tuple{MolGraph}","page":"Preprocessing","title":"MolecularGraph.stereocenter_from_smiles!","text":"stereocenter_from_smiles!(mol::MolGraph) -> Nothing\n\nSet stereocenter information obtained from SMILES.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#Molecular-structure-drawing","page":"Structure drawing","title":"Molecular structure drawing","text":"","category":"section"},{"location":"moleculargraph/draw/","page":"Structure drawing","title":"Structure drawing","text":"Modules = [MolecularGraph]\nPages   = [\"./draw/base.jl\", \"./draw/draw2d.jl\", \"./draw/svg.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/draw/#MolecularGraph.chargesign-Tuple{Int64}","page":"Structure drawing","title":"MolecularGraph.chargesign","text":"chargesign(charge::Int) -> String\n\nGet a charge sign.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.draw2d!-Tuple{Canvas, SimpleMolGraph}","page":"Structure drawing","title":"MolecularGraph.draw2d!","text":"draw2d!(canvas::Canvas, mol::UndirectedGraph; kwargs...)\n\nDraw molecular image to the canvas.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.is_atom_visible-Tuple{SimpleMolGraph}","page":"Structure drawing","title":"MolecularGraph.is_atom_visible","text":"isatomvisible(mol::SimpleMolGraph; setting=DRAW_SETTING) -> Vector{Bool}\n\nReturn whether the atom is visible in the 2D drawing.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.drawsvg-Tuple{SimpleMolGraph}","page":"Structure drawing","title":"MolecularGraph.drawsvg","text":"drawsvg(mol::SimpleMolGraph, width::Int, height::Int)\n\nGenerate molecular structure image as a SVG format string.\n\nwidth and height specifies the size of the image (width and height attribute of svg tag).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.html_fixed_size-Tuple{Any, Any, Any}","page":"Structure drawing","title":"MolecularGraph.html_fixed_size","text":"html_fixed_size(svg, width, height)\n\nGenerate fixed-size HTML wrapper for the SVG element.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.html_grid-Tuple{Any, Any, Any}","page":"Structure drawing","title":"MolecularGraph.html_grid","text":"html_grid(svgs, cols, rowheight)\n\nGenerate grid layout HTML wrapper for the SVG elements.\n\nThe number of columns and grid row height in pixel must be specified.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/draw/#MolecularGraph.initcanvas!-Tuple{SvgCanvas, AbstractArray{Float64, N} where N, Tuple}","page":"Structure drawing","title":"MolecularGraph.initcanvas!","text":"initcanvas!(canvas::Canvas, coords::AbstractArray{Float64}, boundary::Tuple)\n\nMove and adjust the size of the molecule for drawing.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#Molecular-structure-drawing","page":"Molecule","title":"Molecular structure drawing","text":"","category":"section"},{"location":"moleculargraph/molecule/","page":"Molecule","title":"Molecule","text":"Modules = [MolecularGraph]\nPages   = [\"./model/interface.jl\", \"./model/atom.jl\", \"./model/bond.jl\", \"./model/molgraph.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/molecule/#MolecularGraph.to_dict-Tuple{AbstractMolGraph}","page":"Molecule","title":"MolecularGraph.to_dict","text":"to_dict(mol::MolGraph) -> Dict{String,Any}\n\nConvert molecule object into JSON compatible dictionary.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#MolecularGraph.to_json-Tuple{AbstractMolGraph}","page":"Molecule","title":"MolecularGraph.to_json","text":"to_json(mol::MolGraph) -> String\n\nConvert molecule object into JSON String.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#MolecularGraph.undirectededge-Union{Tuple{T}, Tuple{Type{T}, Any, Any}} where T<:Integer","page":"Molecule","title":"MolecularGraph.undirectededge","text":"undirectededge(::Type{T}, src, dst) where T <: Integer -> Edge{T}\nundirectededge(g::SimpleGraph{T}, src, dst) where T -> Edge{T}\nundirectededge(mol::AbstractMolGraph{T}, src, dst) where T -> Edge{T}\n\nA workaround for UndirectedEdge that are not yet implemented in SimpleGraph\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#MolecularGraph.Reaction","page":"Molecule","title":"MolecularGraph.Reaction","text":"Reaction{T}\n\nReaction type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/molecule/#MolecularGraph.atomnumber-Tuple{Symbol}","page":"Molecule","title":"MolecularGraph.atomnumber","text":"atomnumber(atomsymbol::Symbol) -> Int\n\nReturn atom number.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#MolecularGraph.atomsymbol-Tuple{Int64}","page":"Molecule","title":"MolecularGraph.atomsymbol","text":"atomsymbol(n::Int) -> Symbol\n\nReturn atom symbol of given atomic number.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/molecule/#MolecularGraph.SDFAtom","page":"Molecule","title":"MolecularGraph.SDFAtom","text":"SDFAtom\n\nSDFile (CTAB) atom property type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/molecule/#MolecularGraph.SMILESAtom","page":"Molecule","title":"MolecularGraph.SMILESAtom","text":"SMILESAtom\n\nSMILES atom property type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/molecule/#MolecularGraph.SDFBond","page":"Molecule","title":"MolecularGraph.SDFBond","text":"SDFBond\n\nSDFile (CTAB) bond property type.\n\nSDFile bond notation\nSingle bond\n0: u - v\n1: u ◀ v (Up-arrow)\n4: u ~ v (Up or down)\n6: u ◁ v (Down-arrow)\nDouble bond\n0: v = u\n3: u x v (Cis-Trans Unknown)\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/molecule/#MolecularGraph.SMILESBond","page":"Molecule","title":"MolecularGraph.SMILESBond","text":"SMILESBond\n\nSMILES bond property type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/molecule/#MolecularGraph.MolGraph","page":"Molecule","title":"MolecularGraph.MolGraph","text":"MolGraph{T,V,E} <: SimpleMolGraph{T,V,E}\n\nBasic molecular graph type.\n\n\n\n\n\n","category":"type"},{"location":"moleculargraph/mass/#Molecular-mass/weight","page":"Molecular mass/weight","title":"Molecular mass/weight","text":"","category":"section"},{"location":"moleculargraph/mass/","page":"Molecular mass/weight","title":"Molecular mass/weight","text":"Modules = [MolecularGraph]\nPages   = [\"mass.jl\"]\nPrivate = false\nOrder   = [:constant, :function, :type]","category":"page"},{"location":"moleculargraph/mass/#MolecularGraph.exact_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.exact_mass","text":"exact_mass(atomsymbol::Symbol, [digits::Int]) -> Float64\nexact_mass(atom, [digits::Int]) -> Float64\nexact_mass(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn calculated exact mass.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.exact_mass_unc","page":"Molecular mass/weight","title":"MolecularGraph.exact_mass_unc","text":"exact_mass_unc(atomsymbol::Symbol, [number::Union{Int, Nothing}]) -> Tuple{Float64,Float64}\nexact_mass_unc(atom) -> Tuple{Float64,Float64}\nexact_mass_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of calculated exact mass and its uncertainty.\n\nIf number is not given or Atom.mass is not specified, monoisotopic mass will be used instead.\n\n\n\n\n\n","category":"function"},{"location":"moleculargraph/mass/#MolecularGraph.isotopic_composition-Tuple{Symbol, Int64}","page":"Molecular mass/weight","title":"MolecularGraph.isotopic_composition","text":"isotopiccomposition(atomsymbol::Symbol, number::Int; threshold=0.001\n    ) -> Vector{Tuple{Float64,Float64}}\nisotopiccomposition(mol::MolGraph; threshold=0.001\n    ) -> Vector{Tuple{Float64,Float64}}\n\nReturn isotopic composition of the atoms/molecule as a vector of tuples of mass and composition.\n\nRecords that have lower abundance than the given threshold will be filtered out (default 0.001 = 0.1%)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.massspec_peaks-Tuple{MolGraph}","page":"Molecular mass/weight","title":"MolecularGraph.massspec_peaks","text":"massspec_peaks(mol::MolGraph; threshold=0.001) -> Matrix{Float64}\n\nReturn a vector of tuples of each isotopic masses and their relative intensity in the simulated mass spectrum (base peak intensity = 100).\n\nRecords that have lower abundance (not peak intensity) than the given threshold will be filtered out (default 0.001 = 0.1%)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.monoiso_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.monoiso_mass","text":"monoiso_mass(atomsymbol::Symbol, [digits::Int]) -> Float64\nmonoiso_mass(atom, [digits::Int]) -> Float64\nmonoiso_mass(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn monoisotopic mass of the atom/molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.monoiso_mass_unc-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.monoiso_mass_unc","text":"monoiso_mass_unc(atomsymbol::Symbol) -> Tuple{Float64,Float64}\nmonoiso_mass_unc(atom) -> Tuple{Float64,Float64}\nmonoiso_mass_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of monoisotopic mass of the atom/molecule and its uncertainty.\n\nMonoisotopic mass is the relative atomic mass of the most abundant isotope. Even if there is specific Atom.mass value, it will be ignored.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.nominal_mass-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.nominal_mass","text":"nominal_mass(atomsymbol::Symbol) -> Int\nnominal_mass(atom) -> Int\nnominal_mass(mol::MolGraph) -> Int\n\nReturn nominal mass of the atom/molecule.\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.simulate_massspec-Tuple{Vector{Tuple{Float64, Float64}}}","page":"Molecular mass/weight","title":"MolecularGraph.simulate_massspec","text":"simulate_massspec(peaks::Vector{Tuple{Float64,Float64}};\n    resolution=10000, rate=0.01) -> Matrix{Float64}\nsimulate_massspec(mol::MolGraph;\n    threshold=0.001, resolution=10000, rate=0.01) -> Matrix{Float64}\n\nReturn a matrix of simulate mass spectrum (dim 1: datapoints, dim 2: mass and intensity).\n\nNote that the peaks are just calculated from the isotopic composition of atoms (not intended for simulation of fragmentation).\n\nUsage (with Plot.jl)\n\nusing MolecularGraph\nusing Plots\ngr()\nPlots.GRBackend()\n\nmol = smilestomol(\"CCO\")\ndata = simulatemassspec(mol)\nplot(\n    data[:, 1], data[:, 2],\n    leg=false, xlabel = \"Mass\", ylabel = \"Intensity\"\n)\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.standard_weight-Tuple{Symbol}","page":"Molecular mass/weight","title":"MolecularGraph.standard_weight","text":"standard_weight(atomsymbol::Symbol, [digits::Int]) -> Float64\nstandard_weight(atom, [digits::Int]) -> Float64\nstandard_weight(mol::MolGraph, [digits::Int]) -> Float64\n\nReturn standard atomic weight (or molecular weight).\n\n\n\n\n\n","category":"method"},{"location":"moleculargraph/mass/#MolecularGraph.standard_weight_unc","page":"Molecular mass/weight","title":"MolecularGraph.standard_weight_unc","text":"standard_weight_unc(atomsymbol::Symbol) -> Tuple{Float64,Float64}\nstandard_weight_unc(atom) -> Tuple{Float64,Float64}\nstandard_weight_unc(mol::MolGraph) -> Tuple{Float64,Float64}\n\nReturn a tuple of standard atomic weight (or molecular weight) and its uncertainty.\n\nIf Atom.mass is specified, calculated exact mass of the atom will be used instead. \n\n\n\n\n\n","category":"function"},{"location":"#MolecularGraph.jl","page":"Home","title":"MolecularGraph.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"README.md on GitHub","category":"page"},{"location":"","page":"Home","title":"Home","text":"Molecular graph modeling and chemoinformatics toolkit\nFully implemented in Julia\nMIT License","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(@v1.6) pkg> add MolecularGraph","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Jupyter notebook tutorials","category":"page"}]
}
